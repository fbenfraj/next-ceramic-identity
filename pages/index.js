import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useState } from "react";
import CeramicClient from "@ceramicnetwork/http-client";
import ThreeIdResolver from "@ceramicnetwork/3id-did-resolver";
import { EthereumAuthProvider, ThreeIdConnect } from "@3id/connect";
import { DID } from "dids";
import { IDX } from "@ceramicstudio/idx";

// network node we're gonna interract with (test network)
const endpoint = "https://ceramic-clay.3boxlabs.com";

export default function Home() {
  const [name, setName] = useState("");
  const [image, setImage] = useState("");
  const [loaded, setLoaded] = useState(false);

  async function connect() {
    const addresses = await window.ethereum.request({
      method: "eth_requestAccounts",
    });
    return addresses;
  }

  async function readProfile() {
    const [address] = await connect();
    const ceramic = new CeramicClient(endpoint);
    const idx = new IDX({ ceramic });

    try {
      // Currently supported blockchains: https://developers.ceramic.network/reference/javascript/blockchain/
      const data = await idx.get("basicProfile", `${address}@eip155:1`); //eip155 is ethereum blockchain
      console.log("data: ", data);
      if (data.name) setName(data.name);
      if (data.avatar) setImage(data.avatar);
    } catch (error) {
      console.log("error: ", error);
      setLoaded(true);
    }
  }

  async function updateProfile() {
    const [address] = await connect();
    const ceramic = new CeramicClient(endpoint);
    const threeIdConnect = new ThreeIdConnect();
    const provider = new EthereumAuthProvider(window.ethereum, address);

    await threeIdConnect.connect(provider);

    const did = new DID({
      provider: threeIdConnect.getDidProvider(),
      resolver: {
        ...ThreeIdResolver.getResolver(ceramic),
      },
    });

    ceramic.setDID(did);
    await ceramic.did.authenticate();

    const idx = new IDX({ ceramic });

    await idx.set("basicProfile", {
      name,
      avatar: image,
    });

    console.log("Profile updated!");
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <input placeholder="Name" onChange={(e) => setName(e.target.value)} />
        <input
          placeholder="Profile Image"
          onChange={(e) => setImage(e.target.value)}
        />
        <button onClick={updateProfile}>Set Profile</button>
        <button onClick={readProfile}>Read Profile</button>

        {name && <h3>{name}</h3>}
        {image && <img style={{ width: "400px" }} src={image} />}
        {!image && !name && loaded && <h4>No profile, please create one...</h4>}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
